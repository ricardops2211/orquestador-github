name: Orquestador PROD

on:
  repository_dispatch:
    types: [jira-orquestador-produccion]
  workflow_dispatch:
    inputs:
      issue_key:
        description: "Clave del ticket de Jira"
        required: true
      branch_name:
        description: "Rama asociada al ticket"
        required: true

permissions:
  contents: write

jobs:
  run-prod-workflows:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Instalar jq y unzip
        run: sudo apt-get update && sudo apt-get install -y jq unzip

      - name: Obtener RC Tag desde orquestador-jobs.json (PROD)
        id: get-tag
        run: |
          set -euo pipefail

          COUNT=$(jq '.prod | length' orquestador-jobs.json)
          echo "üî¢ Entradas en prod: $COUNT"

          rc_tags=()
          for i in $(seq 0 $((COUNT-1))); do
            RC_TAG_ITEM=$(jq -r ".prod[$i].tag_name" orquestador-jobs.json)
            if [ -n "$RC_TAG_ITEM" ] && [ "$RC_TAG_ITEM" != "null" ]; then
              echo "‚úÖ rc_tag obtenido de prod[$i]: $RC_TAG_ITEM"
              rc_tags+=("$RC_TAG_ITEM")
            else
              echo "‚ö†Ô∏è prod[$i] no tiene tag_name v√°lido"
            fi
          done

          if [ "${#rc_tags[@]}" -eq 0 ]; then
            echo "‚ùå No se encontraron rc_tag en prod"
            exit 1
          fi

          ALL=$(printf "%s\n" "${rc_tags[@]}" | awk '!seen[$0]++' | paste -sd "," -)
          FIRST=$(printf "%s\n" "${rc_tags[@]}" | awk '!seen[$0]++' | head -n1)

          echo "rc_tag=$FIRST" >> $GITHUB_OUTPUT
          echo "rc_tags_all=$ALL" >> $GITHUB_OUTPUT

      - name: Disparar workflows PROD
        id: trigger
        run: |
          set -euo pipefail
          PAT_TOKEN="${{ secrets.PAT_TOKEN }}"
          RC_TAG="${{ steps.get-tag.outputs.rc_tag }}"
          START_TS=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "start_ts=$START_TS" >> $GITHUB_OUTPUT

          COUNT=$(jq '.prod | length' orquestador-jobs.json)
          for i in $(seq 0 $((COUNT-1))); do
            REPO=$(jq -r ".prod[$i].repo" orquestador-jobs.json)
            WORKFLOW_ID=$(jq -r ".prod[$i].workflow" orquestador-jobs.json)

            echo "üöÄ Disparando $WORKFLOW_ID en $REPO con RC_TAG=$RC_TAG ..."
            curl -s -X POST \
              -H "Authorization: token $PAT_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/$REPO/dispatches \
              -d "{\"event_type\":\"trigger-prod\",\"client_payload\":{\"tag\":\"$RC_TAG\"}}"
          done

      - name: Esperar a que terminen workflows PROD
        run: |
          set -euo pipefail
          PAT_TOKEN="${{ secrets.PAT_TOKEN }}"
          START_TS="${{ steps.trigger.outputs.start_ts }}"

          COUNT=$(jq '.prod | length' orquestador-jobs.json)
          for i in $(seq 0 $((COUNT-1))); do
            REPO=$(jq -r ".prod[$i].repo" orquestador-jobs.json)
            WORKFLOW_ID=$(jq -r ".prod[$i].workflow" orquestador-jobs.json)

            echo "‚è≥ Esperando a que termine $WORKFLOW_ID en $REPO..."

            for j in {1..20}; do
              RUNS=$(curl -s -H "Authorization: token $PAT_TOKEN" \
                "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID/runs?event=repository_dispatch&per_page=5")

              RUN_ID=$(echo "$RUNS" | jq -r --arg ts "$START_TS" '.workflow_runs[] | select(.created_at > $ts) | .id' | head -n 1)

              if [ -n "$RUN_ID" ] && [ "$RUN_ID" != "null" ]; then
                echo "üéØ Run encontrado: $RUN_ID"
                break
              fi
              sleep 30
            done

            if [ -z "$RUN_ID" ]; then
              echo "‚ùå No se encontr√≥ run nuevo en $WORKFLOW_ID"
              exit 1
            fi

            for k in {1..30}; do
              RUN=$(curl -s -H "Authorization: token $PAT_TOKEN" \
                "https://api.github.com/repos/$REPO/actions/runs/$RUN_ID")

              STATUS=$(echo "$RUN" | jq -r '.status')
              CONCLUSION=$(echo "$RUN" | jq -r '.conclusion')

              echo "üîé Run $RUN_ID ‚Üí status=$STATUS conclusion=$CONCLUSION"

              if [ "$STATUS" == "completed" ]; then
                if [ "$CONCLUSION" == "success" ]; then
                  echo "‚úÖ $WORKFLOW_ID en $REPO termin√≥ OK"
                  break
                else
                  echo "‚ùå $WORKFLOW_ID en $REPO fall√≥ ($CONCLUSION)"
                  exit 1
                fi
              fi
              sleep 30
            done
          done

      - name: Transicionar hacia RATIFICACION
        env:
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
          ISSUE_KEY: ${{ github.event.inputs.issue_key }}
          TRANSITION_ID: "10"
          JIRA_SITE: "https://marketingpachas.atlassian.net"
        run: |
          echo "üìå Transiciones disponibles para el issue $ISSUE_KEY:"
          curl -s -X GET \
            -u "$JIRA_USER:$JIRA_TOKEN" \
            -H "Accept: application/json" \
            "$JIRA_SITE/rest/api/3/issue/$ISSUE_KEY/transitions" | jq .

          echo "-----------------------------------------"
          echo "‚û°Ô∏è Transicionando el issue $ISSUE_KEY hacia RATIFICACION"

          curl -s -X POST \
            -u "$JIRA_USER:$JIRA_TOKEN" \
            -H "Content-Type: application/json" \
            --data-raw "{
              \"transition\": { \"id\": \"$TRANSITION_ID\" }
            }" \
            "$JIRA_SITE/rest/api/3/issue/$ISSUE_KEY/transitions"

          echo -e "\n‚úÖ Listo, CAMBIADO A RATIFICACION"
