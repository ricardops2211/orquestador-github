name: Orquestador CERT

on:
  workflow_dispatch:

jobs:
  run-cert-workflows:
    runs-on: ubuntu-latest
    outputs:
      rc_tag: ${{ steps.get-tag.outputs.rc_tag }}
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Verificar que orquestador-jobs.json exista
        run: |
          if [ ! -f orquestador-jobs.json ]; then
            echo "❌ orquestador-jobs.json no encontrado!"
            exit 1
          fi
          cat orquestador-jobs.json

      - name: Instalar jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Iterar sobre sección CERT y disparar workflows
        id: trigger
        run: |
          CERTS=$(jq -c '.cert[]' orquestador-jobs.json)
          for workflow in $CERTS; do
            REPO=$(echo $workflow | jq -r '.repo')
            FILE=$(echo $workflow | jq -r '.workflow')
            BRANCH=$(echo $workflow | jq -r '.branch')

            echo "Disparando workflow $FILE en repo $REPO branch $BRANCH"

            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              https://api.github.com/repos/$REPO/dispatches \
              -d "{\"event_type\":\"trigger-cert\",\"client_payload\":{\"workflow\":\"$FILE\",\"branch\":\"$BRANCH\"}}")

            if [ "$RESPONSE" != "204" ]; then
              echo "❌ Error disparando workflow $FILE en $REPO"
              exit 1
            fi
          done

      - name: Esperar que termine el workflow deploy-cert
        id: wait
        run: |
          REPO="ricardops2211/repo-jira"
          WORKFLOW_ID="deploy-cert.yml"
          BRANCH="main"

          echo "⏳ Esperando a que termine $WORKFLOW_ID..."

          for i in {1..30}; do
            RUN_JSON=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID/runs?branch=$BRANCH&event=repository_dispatch&per_page=1")

            STATUS=$(echo "$RUN_JSON" | jq -r '.workflow_runs[0].status')
            CONCLUSION=$(echo "$RUN_JSON" | jq -r '.workflow_runs[0].conclusion')
            RUN_ID=$(echo "$RUN_JSON" | jq -r '.workflow_runs[0].id')

            echo "🔎 Run $RUN_ID → status=$STATUS conclusion=$CONCLUSION"

            if [ "$STATUS" == "completed" ]; then
              if [ "$CONCLUSION" == "success" ]; then
                echo "✅ Workflow terminado con éxito."
                echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
                exit 0
              else
                echo "❌ Workflow falló con conclusión: $CONCLUSION"
                exit 1
              fi
            fi

            echo "⌛ Aún en ejecución... esperando 20s"
            sleep 20
          done

          echo "❌ Timeout esperando el workflow $WORKFLOW_ID"
          exit 1

      - name: Obtener RC Tag del workflow terminado
        id: get-tag
        run: |
          REPO="ricardops2211/repo-jira"
          RUN_ID="${{ steps.wait.outputs.run_id }}"

          echo "📥 Obteniendo RC Tag del run $RUN_ID..."

          JOBS_JSON=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/$REPO/actions/runs/$RUN_ID/jobs")

          RC_TAG=$(echo $JOBS_JSON | jq -r '.jobs[] | select(.name=="release-cert") | .steps[] | select(.name=="Generar RC Tag dinámico") | .outputs.rc_tag')

          echo "✅ RC Tag obtenido: $RC_TAG"
          echo "rc_tag=$RC_TAG" >> $GITHUB_OUTPUT

      - name: Reemplazar RC Tag en orquestador-jobs.json
        run: |
          RC_TAG="${{ steps.get-tag.outputs.rc_tag }}"
          echo "🔧 Reemplazando PONER-RCTAGNAME por $RC_TAG en orquestador-jobs.json"

          jq --arg tag "$RC_TAG" '.prod[0].tag_name = $tag' orquestador-jobs.json > tmp.json && mv tmp.json orquestador-jobs.json

          echo "📄 Archivo final:"
          cat orquestador-jobs.json
