name: Orquestador CERT

on:
  repository_dispatch:
    types: [joborquestador-cert]
  workflow_dispatch:
    inputs:
      issue_key:
        description: "Clave del ticket Jira (ej: ONE-12)"
        required: false
      branch_name:
        description: "Rama asociada (ej: orquestador/ONE-12)"
        required: false

permissions:
  contents: write

jobs:
  run-cert-workflows:
    runs-on: ubuntu-latest
    steps:
      - name: Determinar ISSUE_KEY y BRANCH_NAME
        id: set-vars
        run: |
          ISSUE_KEY="${{ github.event.inputs.issue_key || github.event.client_payload.issue_key }}"
          BRANCH_NAME="${{ github.event.inputs.branch_name || github.event.client_payload.branch_name || 'main' }}"

          echo "📌 ISSUE_KEY=$ISSUE_KEY"
          echo "🌿 BRANCH_NAME=$BRANCH_NAME"

          echo "ISSUE_KEY=$ISSUE_KEY" >> $GITHUB_ENV
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Checkout con la rama
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}
        
      - name: Verificar que orquestador-jobs.json exista
        run: |
          if [ ! -f orquestador-jobs.json ]; then
            echo "❌ orquestador-jobs.json no encontrado!"
            exit 1
          fi
          cat orquestador-jobs.json

      - name: Instalar jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Disparar workflows CERT desde JSON
        id: trigger-cert
        run: |
          set -euo pipefail

          echo "📄 Leyendo sección cert de orquestador-jobs.json"

          COUNT=$(jq '.cert | length' orquestador-jobs.json)
          echo "Encontrados $COUNT workflows en cert"

          for i in $(seq 0 $((COUNT-1))); do
            REPO=$(jq -r ".cert[$i].repo" orquestador-jobs.json)
            WORKFLOW_ID=$(jq -r ".cert[$i].workflow" orquestador-jobs.json)
            BRANCH=$(jq -r ".cert[$i].branch" orquestador-jobs.json)

            echo "➡️ Disparando workflow $WORKFLOW_ID en $REPO (branch=$BRANCH)"

            START_TS=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

            curl -s -X POST \
              -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/$REPO/dispatches \
              -d "{\"event_type\":\"trigger-cert\",\"client_payload\":{\"branch\":\"$BRANCH\"}}"

            echo "⏳ Esperando run posterior a $START_TS..."

            for j in {1..30}; do
              RUN_ID=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID/runs?event=repository_dispatch&per_page=5" \
                | jq -r --arg ts "$START_TS" '.workflow_runs[] | select(.created_at > $ts) | .id' | head -n 1)

              if [ -n "$RUN_ID" ] && [ "$RUN_ID" != "null" ]; then
                echo "🎯 Corriendo action y este es el id: $RUN_ID"
                break
              fi
              echo "⌛ Intento $j esperando run..."
              sleep 20
            done

            if [ -z "${RUN_ID:-}" ]; then
              echo "❌ No se encontró run nuevo para $WORKFLOW_ID"
              exit 1
            fi

            # Polling del run hasta que termine
            for j in {1..30}; do
              RUN=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/$REPO/actions/runs/$RUN_ID")

              STATUS=$(echo "$RUN" | jq -r '.status')
              CONCLUSION=$(echo "$RUN" | jq -r '.conclusion')

              echo "🔎 Run $RUN_ID → status=$STATUS conclusion=$CONCLUSION"

              if [ "$STATUS" == "completed" ]; then
                if [ "$CONCLUSION" == "success" ]; then
                  echo "✅ Workflow $WORKFLOW_ID en $REPO terminó bien"
                  break
                else
                  echo "❌ Workflow $WORKFLOW_ID falló ($CONCLUSION)"
                  exit 1
                fi
              fi
              sleep 20
            done
          done

      - name: Obtener RC Tag dinámicamente desde workflows CERT
        id: get-tag
        run: |
          set -euo pipefail
          PAT_TOKEN="${{ secrets.PAT_TOKEN }}"

          echo "🔎 Buscando rc_tag(s) en orquestador-jobs.json -> sección cert"
          if [ ! -f orquestador-jobs.json ]; then
            echo "❌ orquestador-jobs.json no encontrado!"
            exit 1
          fi

          COUNT=$(jq '.cert | length' orquestador-jobs.json)
          echo "🔢 Entradas en cert: $COUNT"

          rc_tags=()
          for i in $(seq 0 $((COUNT-1))); do
            REPO=$(jq -r ".cert[$i].repo" orquestador-jobs.json)
            WORKFLOW_ID=$(jq -r ".cert[$i].workflow" orquestador-jobs.json)
            BRANCH=$(jq -r '.cert['"$i"'].branch // "main"' orquestador-jobs.json)

            echo "➡️ Revisando: repo=$REPO workflow=$WORKFLOW_ID branch=$BRANCH"

            # Obtener último run (más reciente) para ese workflow/branch/evento repository_dispatch
            RUN_ID=$(curl -s -H "Authorization: token $PAT_TOKEN" \
              "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID/runs?branch=$BRANCH&event=repository_dispatch&per_page=5" \
              | jq -r '.workflow_runs[0].id // empty')

            if [ -z "$RUN_ID" ]; then
              echo "⚠️ No se encontró run para $WORKFLOW_ID en $REPO (branch $BRANCH). Saltando..."
              continue
            fi
            echo "   ▶ Run encontrado: $RUN_ID"

            ARTIFACT_URL=$(curl -s -H "Authorization: token $PAT_TOKEN" \
              "https://api.github.com/repos/$REPO/actions/runs/$RUN_ID/artifacts" \
              | jq -r '.artifacts[] | select(.name=="rc-tag") | .archive_download_url // empty')

            if [ -z "$ARTIFACT_URL" ]; then
              echo "⚠️ No se encontró artifact 'rc-tag' en run $RUN_ID. Saltando..."
              continue
            fi

            mkdir -p ./artifact_$i
            curl -sL -H "Authorization: token $PAT_TOKEN" "$ARTIFACT_URL" -o rc-tag-$i.zip
            unzip -o rc-tag-$i.zip -d ./artifact_$i >/dev/null 2>&1 || true

            # intentar leer rc_tag desde rc_tag.json o cualquier json dentro del artifact
            if [ -f "./artifact_$i/rc_tag.json" ]; then
              RC_TAG_ITEM=$(jq -r '.rc_tag' "./artifact_$i/rc_tag.json" 2>/dev/null || true)
            else
              RC_TAG_ITEM=$(jq -r '.. | objects | .rc_tag? // empty' ./artifact_$i/* 2>/dev/null | head -n 1 || true)
            fi

            if [ -z "$RC_TAG_ITEM" ]; then
              echo "⚠️ No se pudo extraer rc_tag del artifact en run $RUN_ID"
              continue
            fi

            echo "   ✅ rc_tag obtenido: $RC_TAG_ITEM"
            rc_tags+=("$RC_TAG_ITEM")
          done

          if [ "${#rc_tags[@]}" -eq 0 ]; then
            echo "❌ No se encontraron rc_tag en ningún workflow cert"
            exit 1
          fi

          # deduplicar y preparar outputs
          ALL=$(printf "%s\n" "${rc_tags[@]}" | awk '!seen[$0]++' | paste -sd "," -)
          FIRST=$(printf "%s\n" "${rc_tags[@]}" | awk '!seen[$0]++' | head -n1)

          echo "🔔 rc_tags_all=$ALL"
          echo "🔔 rc_tag (primer valor)=$FIRST"

          # Setear outputs (usar $GITHUB_OUTPUT)
          echo "rc_tag=$FIRST" >> $GITHUB_OUTPUT
          echo "rc_tags_all=$ALL" >> $GITHUB_OUTPUT


      - name: Reemplazar RC Tags en orquestador-jobs.json (uno a uno)
        run: |
          echo "🔧 Reemplazando prod[i].tag_name con los rc_tags obtenidos"
          IFS=',' read -ra TAGS <<< "${{ steps.get-tag.outputs.rc_tags_all }}"
      
          TMP=orquestador-jobs.json
          for i in "${!TAGS[@]}"; do
            TAG="${TAGS[$i]}"
            echo "  ➡️ prod[$i].tag_name = $TAG"
            jq --arg tag "$TAG" --argjson idx $i \
              '.prod[$idx].tag_name = $tag' "$TMP" > tmp.json && mv tmp.json "$TMP"
          done
      
          echo "📄 Archivo final:"
          cat orquestador-jobs.json

      - name: Commit & Push cambios en main
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git add orquestador-jobs.json
          git commit -m "🔖 Update prod tag_name con RC Tag ${{ steps.get-tag.outputs.rc_tag }}" || echo "No hay cambios que commitear"

          git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/ricardops2211/orquestador-github.git "orquestador/$ISSUE_KEY"
