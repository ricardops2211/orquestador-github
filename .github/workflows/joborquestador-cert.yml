name: Orquestador CERT

on:
  workflow_dispatch:

jobs:
  run-cert-workflows:
    runs-on: ubuntu-latest
    outputs:
      rc_tag: ${{ steps.get-tag.outputs.rc_tag }}
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Verificar que orquestador-jobs.json exista
        run: |
          if [ ! -f orquestador-jobs.json ]; then
            echo "‚ùå orquestador-jobs.json no encontrado!"
            exit 1
          fi
          cat orquestador-jobs.json

      - name: Instalar jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Iterar sobre secci√≥n CERT y disparar workflows
        id: trigger
        run: |
          CERTS=$(jq -c '.cert[]' orquestador-jobs.json)
          for workflow in $CERTS; do
            REPO=$(echo $workflow | jq -r '.repo')
            FILE=$(echo $workflow | jq -r '.workflow')
            BRANCH=$(echo $workflow | jq -r '.branch')

            echo "Disparando workflow $FILE en repo $REPO branch $BRANCH"

            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              https://api.github.com/repos/$REPO/dispatches \
              -d "{\"event_type\":\"trigger-cert\",\"client_payload\":{\"workflow\":\"$FILE\",\"branch\":\"$BRANCH\"}}")

            if [ "$RESPONSE" != "204" ]; then
              echo "‚ùå Error disparando workflow $FILE en $REPO"
              exit 1
            fi
          done

      - name: Esperar que termine el workflow deploy-cert
        id: wait
        run: |
          REPO="ricardops2211/repo-jira"
          WORKFLOW_ID="deploy-cert.yml"
          BRANCH="main"

          echo "‚è≥ Esperando a que termine $WORKFLOW_ID..."

          # Guardar timestamp actual (antes de esperar runs nuevos)
          START_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "üìå Timestamp de inicio: $START_TIME"

          for i in {1..30}; do
            RUN_JSON=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID/runs?branch=$BRANCH&event=repository_dispatch&per_page=3")

            # Filtrar solo los runs creados despu√©s de START_TIME
            RUN_ID=$(echo "$RUN_JSON" | jq -r --arg start "$START_TIME" '.workflow_runs[] | select(.created_at > $start) | .id' | head -n 1)
            STATUS=$(echo "$RUN_JSON" | jq -r --arg id "$RUN_ID" '.workflow_runs[] | select(.id == ($id|tonumber)) | .status')
            CONCLUSION=$(echo "$RUN_JSON" | jq -r --arg id "$RUN_ID" '.workflow_runs[] | select(.id == ($id|tonumber)) | .conclusion')

            if [ -z "$RUN_ID" ] || [ "$RUN_ID" == "null" ]; then
              echo "‚åõ Todav√≠a no aparece el nuevo run... esperando 10s"
              sleep 10
              continue
            fi

            echo "üîé Run $RUN_ID ‚Üí status=$STATUS conclusion=$CONCLUSION"

            if [ "$STATUS" == "completed" ]; then
              if [ "$CONCLUSION" == "success" ]; then
                echo "‚úÖ Workflow terminado con √©xito."
                echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
                exit 0
              else
                echo "‚ùå Workflow fall√≥ con conclusi√≥n: $CONCLUSION"
                exit 1
              fi
            fi

            echo "‚åõ A√∫n en ejecuci√≥n... esperando 20s"
            sleep 20
          done

          echo "‚ùå Timeout esperando el workflow $WORKFLOW_ID"
          exit 1

