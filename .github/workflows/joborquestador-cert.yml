name: Orquestador CERT

on:
  workflow_dispatch:

jobs:
  run-cert-workflows:
    runs-on: ubuntu-latest
    outputs:
      rc_tag: ${{ steps.get-tag.outputs.rc_tag }}
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Verificar que orquestador-jobs.json exista
        run: |
          if [ ! -f orquestador-jobs.json ]; then
            echo "❌ orquestador-jobs.json no encontrado!"
            exit 1
          fi
          cat orquestador-jobs.json

      - name: Instalar jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Disparar workflow deploy-cert
        id: trigger-cert
        run: |
          REPO="ricardops2211/repo-jira"
          WORKFLOW_ID="deploy-cert.yml"

          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/$REPO/dispatches \
            -d '{"event_type":"trigger-cert"}')

          echo "🔔 Workflow dispatch enviado. Esperando a que aparezca el run..."
          
          # Listar runs recientes y tomar el último
          RUN_ID=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID/runs?per_page=1" \
            | jq -r '.workflow_runs[0].id')

          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT


      - name: Disparar workflow deploy-cert
        id: trigger
        run: |
          REPO="ricardops2211/repo-jira"
          WORKFLOW_ID="deploy-cert.yml"

          # Tomamos el timestamp actual (antes de disparar)
          START_TS=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "start_ts=$START_TS" >> $GITHUB_OUTPUT

          echo "🚀 Disparando workflow..."
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/$REPO/dispatches \
            -d '{"event_type":"trigger-cert"}'

      - name: Esperar workflow deploy-cert
        id: wait
        run: |
          set -euo pipefail
          REPO="ricardops2211/repo-jira"
          WORKFLOW_ID="deploy-cert.yml"
          START_TS="${{ steps.trigger.outputs.start_ts }}"

          echo "📌 Timestamp de inicio: $START_TS"

          for i in {1..30}; do
            RUNS=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/$REPO/actions/workflows/$WORKFLOW_ID/runs?event=repository_dispatch&per_page=5")

            # Filtrar solo runs posteriores al timestamp
            RUN_ID=$(echo "$RUNS" | jq -r --arg ts "$START_TS" '.workflow_runs[] | select(.created_at > $ts) | .id' | head -n 1)

            if [ -n "$RUN_ID" ] && [ "$RUN_ID" != "null" ]; then
              echo "🎯 Encontrado run nuevo: $RUN_ID"
              break
            fi

            echo "⌛ Esperando a que aparezca el run..."
            sleep 10
          done

          if [ -z "$RUN_ID" ]; then
            echo "❌ No se encontró run nuevo después de $START_TS"
            exit 1
          fi

          # Polling al run específico
          for i in {1..30}; do
            RUN=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/$REPO/actions/runs/$RUN_ID")

            STATUS=$(echo "$RUN" | jq -r '.status')
            CONCLUSION=$(echo "$RUN" | jq -r '.conclusion')

            echo "🔎 Run $RUN_ID → status=$STATUS conclusion=$CONCLUSION"

            if [ "$STATUS" == "completed" ]; then
              if [ "$CONCLUSION" == "success" ]; then
                echo "✅ Workflow terminó bien"
                exit 0
              else
                echo "❌ Workflow terminó con fallo ($CONCLUSION)"
                exit 1
              fi
            fi

            sleep 20
          done

          echo "❌ Timeout esperando run $RUN_ID"
          exit 1

          
      - name: Reemplazar RC Tag en orquestador-jobs.json
        run: |
          RC_TAG="${{ steps.get-tag.outputs.rc_tag }}"
          echo "🔧 Reemplazando PONER-RCTAGNAME por $RC_TAG en orquestador-jobs.json"

          jq --arg tag "$RC_TAG" '.prod[0].tag_name = $tag' orquestador-jobs.json > tmp.json && mv tmp.json orquestador-jobs.json

          echo "📄 Archivo final:"
          cat orquestador-jobs.json
